from flask import Flask, render_template_string, request, redirect, url_for
import pandas as pd
from datetime import datetime

app = Flask(__name__)
EXCEL_PATH = "budget.xlsx"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ = {
    "–†–∞–±–æ—Ç–∞": ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–ë–æ–Ω—É—Å—ã"],
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–î–∏–≤–∏–¥–µ–Ω–¥—ã", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã"],
    "–ü—Ä–æ—á–µ–µ": ["–ü–æ–¥–∞—Ä–∫–∏", "–í–æ–∑–≤—Ä–∞—Ç—ã"]
}

–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥ = {
    "–ï–¥–∞": ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–ö–∞—Ñ–µ", "–§–∞—Å—Ç—Ñ—É–¥"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–ê–≤—Ç–æ–±—É—Å", "–ú–µ—Ç—Ä–æ", "–¢–∞–∫—Å–∏"],
    "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏": ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–í–æ–¥–∞"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–ö–∏–Ω–æ", "–ò–≥—Ä—ã", "–ü–æ–¥–ø–∏—Å–∫–∏"]
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
def –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ():
    try:
        return pd.read_excel(EXCEL_PATH)
    except:
        return pd.DataFrame(columns=["–î–∞—Ç–∞", "–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞"])

def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–ø–∏—Å—å(—Ç–∏–ø, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞):
    df = –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ()
    –Ω–æ–≤–∞—è = {
        "–î–∞—Ç–∞": datetime.today().strftime('%Y-%m-%d'),
        "–¢–∏–ø": —Ç–∏–ø,
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": –∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        "–°—É–º–º–∞": float(—Å—É–º–º–∞)
    }
    df = pd.concat([df, pd.DataFrame([–Ω–æ–≤–∞—è])], ignore_index=True)
    df.to_excel(EXCEL_PATH, index=False)

# HTML
TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>–ë—é–¥–∂–µ—Ç</title>
    <meta charset="utf-8">
</head>
<body style="font-family:sans-serif; max-width:800px; margin:auto;">
    <h2>üí∞ –£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</h2>

    <form method="post">
        <label>–¢–∏–ø:</label>
        <select name="—Ç–∏–ø" onchange="this.form.submit()">
            <option value="–î–æ—Ö–æ–¥" {% if —Ç–∏–ø == '–î–æ—Ö–æ–¥' %}selected{% endif %}>–î–æ—Ö–æ–¥</option>
            <option value="–†–∞—Å—Ö–æ–¥" {% if —Ç–∏–ø == '–†–∞—Å—Ö–æ–¥' %}selected{% endif %}>–†–∞—Å—Ö–æ–¥</option>
        </select>

        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
        <select name="–∫–∞—Ç–µ–≥–æ—Ä–∏—è" onchange="this.form.submit()">
            {% for cat in –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %}
                <option value="{{ cat }}" {% if cat == –∫–∞—Ç–µ–≥–æ—Ä–∏—è %}selected{% endif %}>{{ cat }}</option>
            {% endfor %}
        </select>

        <label>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
        <select name="–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è">
            {% for sub in –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %}
                <option value="{{ sub }}">{{ sub }}</option>
            {% endfor %}
        </select>

        <label>–°—É–º–º–∞:</label>
        <input type="number" step="0.01" name="—Å—É–º–º–∞" required>
        <button type="submit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </form>

    <hr>

    <h3>üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ</h3>
    <form method="get">
        <label>–°:</label>
        <input type="date" name="start_date" value="{{ start_date }}">
        <label>–ü–æ:</label>
        <input type="date" name="end_date" value="{{ end_date }}">
        <button type="submit">–ü–æ–∫–∞–∑–∞—Ç—å</button>
    </form>

    <h4>üìã –ó–∞–ø–∏—Å–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥:</h4>
    <table border="1" cellpadding="5">
        <tr><th>–î–∞—Ç–∞</th><th>–¢–∏–ø</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–°—É–º–º–∞</th></tr>
        {% for row in –∑–∞–ø–∏—Å–∏ %}
        <tr>
            <td>{{ row['–î–∞—Ç–∞'] }}</td>
            <td>{{ row['–¢–∏–ø'] }}</td>
            <td>{{ row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] }}</td>
            <td>{{ row['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] }}</td>
            <td>{{ row['–°—É–º–º–∞'] }}</td>
        </tr>
        {% endfor %}
    </table>

    <p><strong>–ò—Ç–æ–≥–æ:</strong> {{ –∏—Ç–æ–≥ }}</p>
</body>
</html>
'''

@app.route("/", methods=["GET", "POST"])
def home():
    —Ç–∏–ø = request.form.get("—Ç–∏–ø", "–î–æ—Ö–æ–¥")
    –∫–∞—Ç–µ–≥–æ—Ä–∏—è = request.form.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", list((–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥).keys())[0])
    –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ = (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥).get(–∫–∞—Ç–µ–≥–æ—Ä–∏—è, [])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if request.method == "POST" and "—Å—É–º–º–∞" in request.form:
        –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è = request.form.get("–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        —Å—É–º–º–∞ = request.form.get("—Å—É–º–º–∞")

        if —Å—É–º–º–∞.strip() == "":
            return "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É!"

        try:
            —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–ø–∏—Å—å(—Ç–∏–ø, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞)
            return redirect(url_for("home"))
        except ValueError:
            return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã."

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    df = –∑–∞–≥—Ä—É–∑–∏—Ç—å_–¥–∞–Ω–Ω—ã–µ()
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"])
    start_date = request.args.get("start_date", "")
    end_date = request.args.get("end_date", "")
    –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ = df.copy()

    if start_date:
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ["–î–∞—Ç–∞"] >= pd.to_datetime(start_date)]
    if end_date:
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ[–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ["–î–∞—Ç–∞"] <= pd.to_datetime(end_date)]

    –∑–∞–ø–∏—Å–∏ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ.to_dict(orient="records")
    –∏—Ç–æ–≥ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ["–°—É–º–º–∞"].sum()

    return render_template_string(TEMPLATE,
        —Ç–∏–ø=—Ç–∏–ø,
        –∫–∞—Ç–µ–≥–æ—Ä–∏—è=–∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        –∫–∞—Ç–µ–≥–æ—Ä–∏–∏=(–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥).keys(),
        –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏=–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,
        –∑–∞–ø–∏—Å–∏=–∑–∞–ø–∏—Å–∏,
        –∏—Ç–æ–≥=–∏—Ç–æ–≥,
        start_date=start_date,
        end_date=end_date
    )

if __name__ == "__main__":
    app.run(debug=True)
import pandas as pd
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ = {
    "–†–∞–±–æ—Ç–∞": ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–ë–æ–Ω—É—Å—ã"],
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–î–∏–≤–∏–¥–µ–Ω–¥—ã", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã"],
    "–ü—Ä–æ—á–µ–µ": ["–ü–æ–¥–∞—Ä–∫–∏", "–í–æ–∑–≤—Ä–∞—Ç—ã"]
}
–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥ = {
    "–ï–¥–∞": ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–ö–∞—Ñ–µ", "–§–∞—Å—Ç—Ñ—É–¥"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–ê–≤—Ç–æ–±—É—Å", "–ú–µ—Ç—Ä–æ", "–¢–∞–∫—Å–∏"],
    "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ": ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–í–æ–¥–∞"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–ö–∏–Ω–æ", "–ò–≥—Ä—ã", "–ü–æ–¥–ø–∏—Å–∫–∏"]
}

excel_path = "budget.xlsx"
try:
    df = pd.read_excel(excel_path)
except:
    df = pd.DataFrame(columns=["–î–∞—Ç–∞", "–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞"])
    df.to_excel(excel_path, index=False)

def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–ø–∏—Å—å(—Ç–∏–ø, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞):
    global df
    –∑–∞–ø–∏—Å—å = {
        "–î–∞—Ç–∞": datetime.today().strftime('%Y-%m-%d'),
        "–¢–∏–ø": —Ç–∏–ø,
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": –∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        "–°—É–º–º–∞": float(—Å—É–º–º–∞)
    }
    df = pd.concat([df, pd.DataFrame([–∑–∞–ø–∏—Å—å])], ignore_index=True)
    df.to_excel(excel_path, index=False)

def –ø–æ—Å—Ç—Ä–æ–∏—Ç—å_–≥—Ä–∞—Ñ–∏–∫():
    —Ä–∞—Å—Ö–æ–¥—ã = df[df["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥"]
    –≥—Ä–∞—Ñ–∏–∫ = —Ä–∞—Å—Ö–æ–¥—ã.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum()
    –≥—Ä–∞—Ñ–∏–∫.plot(kind="pie", autopct="%1.1f%%", figsize=(6, 6), title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    plt.ylabel("")
    plt.tight_layout()
    plt.show()

def –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å_–ø–æ_–¥–∞—Ç–∞–º(start, end):
    try:
        start = pd.to_datetime(start)
        end = pd.to_datetime(end)
        return df[(df["–î–∞—Ç–∞"] >= start) & (df["–î–∞—Ç–∞"] <= end)]
    except:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã!")
        return pd.DataFrame()

def —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å_csv(—Ç–∞–±–ª–∏—Ü–∞_df):
    —Ñ–∞–π–ª = filedialog.asksaveasfilename(defaultextension=".csv")
    if —Ñ–∞–π–ª:
        —Ç–∞–±–ª–∏—Ü–∞_df.to_csv(—Ñ–∞–π–ª, index=False)
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

# GUI
root = tk.Tk()
root.title("–£—á—ë—Ç –±—é–¥–∂–µ—Ç–∞")

notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True)

### –í–∫–ª–∞–¥–∫–∞ 1: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
frame1 = ttk.Frame(notebook)
notebook.add(frame1, text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")

combo_—Ç–∏–ø = ttk.Combobox(frame1, values=["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"])
combo_—Ç–∏–ø.grid(row=0, column=1, padx=5, pady=5)
combo_—Ç–∏–ø.current(0)

def –æ–±–Ω–æ–≤–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏(*_):
    —Ç–∏–ø = combo_—Ç–∏–ø.get()
    –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ = –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥
    combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è["values"] = list(–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.keys())
    combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.current(0)
    –æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏()

def –æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏(*_):
    —Ç–∏–ø = combo_—Ç–∏–ø.get()
    –∫–∞—Ç–µ–≥–æ—Ä–∏—è = combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.get()
    –ø–æ–¥–∫–∞—Ç = –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥
    combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è["values"] = –ø–æ–¥–∫–∞—Ç.get(–∫–∞—Ç–µ–≥–æ—Ä–∏—è, [])
    if –ø–æ–¥–∫–∞—Ç.get(–∫–∞—Ç–µ–≥–æ—Ä–∏—è):
        combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è.current(0)

combo_—Ç–∏–ø.bind("<<ComboboxSelected>>", –æ–±–Ω–æ–≤–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

ttk.Label(frame1, text="–¢–∏–ø:").grid(row=0, column=0)
ttk.Label(frame1, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=1, column=0)
combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è = ttk.Combobox(frame1)
combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.grid(row=1, column=1)
combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.bind("<<ComboboxSelected>>", –æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

ttk.Label(frame1, text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(row=2, column=0)
combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è = ttk.Combobox(frame1)
combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è.grid(row=2, column=1)

ttk.Label(frame1, text="–°—É–º–º–∞:").grid(row=3, column=0)
entry_—Å—É–º–º–∞ = ttk.Entry(frame1)
entry_—Å—É–º–º–∞.grid(row=3, column=1)

def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å():
    try:
        —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∑–∞–ø–∏—Å—å(combo_—Ç–∏–ø.get(), combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.get(), combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è.get(), entry_—Å—É–º–º–∞.get())
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        entry_—Å—É–º–º–∞.delete(0, tk.END)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

ttk.Button(frame1, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å).grid(row=4, columnspan=2, pady=10)
–æ–±–Ω–æ–≤–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏()

### –í–∫–ª–∞–¥–∫–∞ 2: –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
frame2 = ttk.Frame(notebook)
notebook.add(frame2, text="–í—Å–µ –∑–∞–ø–∏—Å–∏")

tree = ttk.Treeview(frame2, columns=list(df.columns), show="headings")
for col in df.columns:
    tree.heading(col, text=col)
    tree.column(col, width=100)
tree.pack(fill="both", expand=True)

def –æ–±–Ω–æ–≤–∏—Ç—å_—Ç–∞–±–ª–∏—Ü—É():
    for i in tree.get_children():
        tree.delete(i)
    for _, row in df.iterrows():
        tree.insert("", "end", values=list(row))

–æ–±–Ω–æ–≤–∏—Ç—å_—Ç–∞–±–ª–∏—Ü—É()

### –í–∫–ª–∞–¥–∫–∞ 3: –§–∏–ª—å—Ç—Ä –∏ –æ—Ç—á—ë—Ç
frame3 = ttk.Frame(notebook)
notebook.add(frame3, text="–û—Ç—á—ë—Ç/–§–∏–ª—å—Ç—Ä")

ttk.Label(frame3, text="–° –¥–∞—Ç—ã (–≥–≥–≥–≥-–º–º-–¥–¥):").grid(row=0, column=0)
entry_start = ttk.Entry(frame3)
entry_start.grid(row=0, column=1)

ttk.Label(frame3, text="–ü–æ –¥–∞—Ç—É:").grid(row=1, column=0)
entry_end = ttk.Entry(frame3)
entry_end.grid(row=1, column=1)

output = tk.Text(frame3, height=10, width=50)
output.grid(row=3, column=0, columnspan=2, pady=10)

def –ø–æ–∫–∞–∑–∞—Ç—å_–æ—Ç—á—ë—Ç():
    –¥–∞–Ω–Ω—ã–µ = –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å_–ø–æ_–¥–∞—Ç–∞–º(entry_start.get(), entry_end.get())
    if not –¥–∞–Ω–Ω—ã–µ.empty:
        –∏—Ç–æ–≥ = –¥–∞–Ω–Ω—ã–µ.groupby("–¢–∏–ø")["–°—É–º–º–∞"].sum()
        output.delete("1.0", tk.END)
        output.insert(tk.END, f"–î–æ—Ö–æ–¥: {–∏—Ç–æ–≥.get('–î–æ—Ö–æ–¥', 0):.2f} ‚ÇΩ\n")
        output.insert(tk.END, f"–†–∞—Å—Ö–æ–¥: {–∏—Ç–æ–≥.get('–†–∞—Å—Ö–æ–¥', 0):.2f} ‚ÇΩ\n")
    else:
        output.delete("1.0", tk.END)
        output.insert(tk.END, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

ttk.Button(frame3, text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç", command=–ø–æ–∫–∞–∑–∞—Ç—å_–æ—Ç—á—ë—Ç).grid(row=2, column=0, pady=5)
ttk.Button(frame3, text="–≠–∫—Å–ø–æ—Ä—Ç CSV", command=lambda: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å_csv(–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å_–ø–æ_–¥–∞—Ç–∞–º(entry_start.get(), entry_end.get()))).grid(row=2, column=1, pady=5)

### –í–∫–ª–∞–¥–∫–∞ 4: –ì—Ä–∞—Ñ–∏–∫
frame4 = ttk.Frame(notebook)
notebook.add(frame4, text="–ì—Ä–∞—Ñ–∏–∫")

ttk.Button(frame4, text="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤", command=–ø–æ—Å—Ç—Ä–æ–∏—Ç—å_–≥—Ä–∞—Ñ–∏–∫).pack(pady=20)

root.mainloop()
import pandas as pd
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime

–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥ = {
    "–†–∞–±–æ—Ç–∞": ["–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–ë–æ–Ω—É—Å—ã"],
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–î–∏–≤–∏–¥–µ–Ω–¥—ã", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã"],
    "–ü—Ä–æ—á–µ–µ": ["–ü–æ–¥–∞—Ä–∫–∏", "–í–æ–∑–≤—Ä–∞—Ç—ã"]
}

–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥ = {
    "–ï–¥–∞": ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–ö–∞—Ñ–µ", "–§–∞—Å—Ç—Ñ—É–¥"],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–ê–≤—Ç–æ–±—É—Å", "–ú–µ—Ç—Ä–æ", "–¢–∞–∫—Å–∏"],
    "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏": ["–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–í–æ–¥–∞"],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–ö–∏–Ω–æ", "–ò–≥—Ä—ã", "–ü–æ–¥–ø–∏—Å–∫–∏"]
}

excel_path = "budget.xlsx"

try:
    df = pd.read_excel(excel_path, sheet_name="–£—á—ë—Ç")
except FileNotFoundError:
    df = pd.DataFrame(columns=["–î–∞—Ç–∞", "–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–°—É–º–º–∞"])
    df.to_excel(excel_path, sheet_name="–£—á—ë—Ç", index=False)


def –¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–ø–∏—Å—å(—Ç–∏–ø, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—É–º–º–∞, –¥–∞—Ç–∞):
    global df
    if not —Å—É–º–º–∞:
        raise ValueError("–ü–æ–ª–µ '–°—É–º–º–∞' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    –Ω–æ–≤–∞—è_–∑–∞–ø–∏—Å—å = {
        "–î–∞—Ç–∞": –¥–∞—Ç–∞,
        "–¢–∏–ø": —Ç–∏–ø,
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": –∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è,
        "–°—É–º–º–∞": float(—Å—É–º–º–∞)
    }
    df = pd.concat([df, pd.DataFrame([–Ω–æ–≤–∞—è_–∑–∞–ø–∏—Å—å])], ignore_index=True)
    df.to_excel(excel_path, sheet_name="–£—á—ë—Ç", index=False)


def –ø–æ—Å—Ç—Ä–æ–∏—Ç—å_–≥—Ä–∞—Ñ–∏–∫():
    —Ä–∞—Å—Ö–æ–¥—ã = df[df["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥"]
    if —Ä–∞—Å—Ö–æ–¥—ã.empty:
        messagebox.showinfo("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return
    –≥—Ä–∞—Ñ–∏–∫ = —Ä–∞—Å—Ö–æ–¥—ã.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum()
    –≥—Ä–∞—Ñ–∏–∫.plot(kind="pie", autopct="%1.1f%%", figsize=(6, 6), title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    plt.ylabel("")
    plt.tight_layout()
    plt.show()


def –∑–∞–ø—É—Å—Ç–∏—Ç—å_gui():
    def –æ–±–Ω–æ–≤–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏(event=None):
        —Ç–∏–ø = combo_—Ç–∏–ø.get()
        –¥–æ—Å—Ç—É–ø–Ω—ã–µ = list(–∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥.keys() if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥.keys())
        combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è["values"] = –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.current(0)
        –æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏()

    def –æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏(event=None):
        —Ç–∏–ø = combo_—Ç–∏–ø.get()
        –∫–∞—Ç–µ–≥–æ—Ä–∏—è = combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.get()
        –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ = –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_–¥–æ—Ö–æ–¥.get(–∫–∞—Ç–µ–≥–æ—Ä–∏—è, []) if —Ç–∏–ø == "–î–æ—Ö–æ–¥" else –∫–∞—Ç–µ–≥–æ—Ä–∏–∏_—Ä–∞—Å—Ö–æ–¥.get(–∫–∞—Ç–µ–≥–æ—Ä–∏—è, [])
        combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è["values"] = –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
            combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è.current(0)

    def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å():
        try:
            –¥–æ–±–∞–≤–∏—Ç—å_–∑–∞–ø–∏—Å—å(
                combo_—Ç–∏–ø.get(),
                combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.get(),
                combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è.get(),
                entry_—Å—É–º–º–∞.get(),
                entry_–¥–∞—Ç–∞.get()
            )
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            entry_—Å—É–º–º–∞.delete(0, tk.END)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    window = tk.Tk()
    window.title("–£—á—ë—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    window.geometry("350x260")
    window.resizable(False, False)

    ttk.Label(window, text="–¢–∏–ø:").grid(column=0, row=0, padx=5, pady=5, sticky="e")
    combo_—Ç–∏–ø = ttk.Combobox(window, values=["–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥"], state="readonly")
    combo_—Ç–∏–ø.current(0)
    combo_—Ç–∏–ø.grid(column=1, row=0, padx=5, pady=5)
    combo_—Ç–∏–ø.bind("<<ComboboxSelected>>", –æ–±–Ω–æ–≤–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

    ttk.Label(window, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(column=0, row=1, padx=5, pady=5, sticky="e")
    combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è = ttk.Combobox(window, state="readonly")
    combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.grid(column=1, row=1, padx=5, pady=5)
    combo_–∫–∞—Ç–µ–≥–æ—Ä–∏—è.bind("<<ComboboxSelected>>", –æ–±–Ω–æ–≤–∏—Ç—å_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)

    ttk.Label(window, text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:").grid(column=0, row=2, padx=5, pady=5, sticky="e")
    combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è = ttk.Combobox(window, state="readonly")
    combo_–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è.grid(column=1, row=2, padx=5, pady=5)

    ttk.Label(window, text="–°—É–º–º–∞:").grid(column=0, row=3, padx=5, pady=5, sticky="e")
    entry_—Å—É–º–º–∞ = ttk.Entry(window)
    entry_—Å—É–º–º–∞.grid(column=1, row=3, padx=5, pady=5)

    ttk.Label(window, text="–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):").grid(column=0, row=4, padx=5, pady=5, sticky="e")
    entry_–¥–∞—Ç–∞ = ttk.Entry(window)
    entry_–¥–∞—Ç–∞.insert(0, datetime.today().strftime('%Y-%m-%d'))
    entry_–¥–∞—Ç–∞.grid(column=1, row=4, padx=5, pady=5)

    btn_—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å = ttk.Button(window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
    btn_—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.grid(column=0, row=5, columnspan=2, pady=10)

    btn_–≥—Ä–∞—Ñ–∏–∫ = ttk.Button(window, text="–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", command=–ø–æ—Å—Ç—Ä–æ–∏—Ç—å_–≥—Ä–∞—Ñ–∏–∫)
    btn_–≥—Ä–∞—Ñ–∏–∫.grid(column=0, row=6, columnspan=2, pady=5)

    –æ–±–Ω–æ–≤–∏—Ç—å_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏()
    window.mainloop()


if __name__ == "__main__":
    –∑–∞–ø—É—Å—Ç–∏—Ç—å_gui()
